<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System.Collections.Generic;
<#
	string BASE_TYPE = "Statement";	
	string EXPRESSION = "Expression";
	string TOKEN_TYPE = "Token";
	string OBJECT_TYPE = "object";
	string INDENT = "    ";

	var expressions = new [] {
		new Exp("Block", new Arg("List<" +BASE_TYPE + ">", "statements")),
		new Exp("Class", new Arg(TOKEN_TYPE, "name"), new Arg(EXPRESSION, "superClass"), new Arg("List<Statement.Function>", "methods")),
		new Exp("Expression", new Arg(EXPRESSION, "expression")),
		new Exp("Function", new Arg(TOKEN_TYPE, "name"), new Arg("List<Token>", "parameters"), new Arg("List<" + BASE_TYPE + ">", "body")),
		new Exp("If", new Arg(TOKEN_TYPE, "condition"), new Arg(BASE_TYPE, "thenBranch"), new Arg(BASE_TYPE, "elseBranch")),
		new Exp("Print", new Arg(BASE_TYPE, "expression")),
		new Exp("Return", new Arg(TOKEN_TYPE, "keyword"), new Arg(EXPRESSION, "value")),
		new Exp("Var", new Arg(TOKEN_TYPE, "name"), new Arg(EXPRESSION, "initializer")),
		new Exp("While", new Arg(EXPRESSION, "condition"), new Arg(BASE_TYPE, "body"))
    };

#>
namespace LoxLanguage
{
	public abstract class <#= BASE_TYPE #>
	{
		public interface IVisitor<T> 
		{
<#		
		PushIndent(INDENT + INDENT);
		{
			for(int i = 0; i < expressions.Length; i++) 
			{
				var current = expressions[i];
				PushIndent(INDENT);
                {
					Write("T");
					Write(" Visit(");
					Write(current.name);
					Write(" ");
					Write("_" + current.name.ToLower());
					WriteLine(");");
                }
				PopIndent();
			}
		}
		PopIndent();
#>
		}
<#		
		WriteLine(" ");
		PushIndent(INDENT + INDENT);
		for(int i = 0; i < expressions.Length; i++) 
		{
			var current = expressions[i];
			Write("public class ");
			Write(current.name);
			Write(" : ");
			WriteLine(BASE_TYPE);
			WriteLine("{");
			PushIndent(INDENT);
            {
				// Fields
				for(int x = 0; x < current.args.Length; x++)
				{
					var cArg = current.args[x];
					Write("public ");
					Write(cArg.type);
					Write(" ");
					Write(cArg.name);
					WriteLine(";");
                }

				// Next Line
				WriteLine(" ");

				// Constructor
				Write("public ");
				Write(current.name);
				Write("(");
				for(int x = 0; x < current.args.Length; x++)
                {
					var cArg = current.args[x];
					Write(cArg.type);
					Write(" ");
					Write(cArg.name);
					if(x + 1 < current.args.Length)
                    {
						Write(", ");
                    }
                }
				WriteLine(")");
				WriteLine("{");
				PushIndent(INDENT);
                {
					for(int x = 0; x < current.args.Length; x++)
					{
						var cArg = current.args[x];
						Write("this.");
						Write(cArg.name);
						Write(" = ");
						Write(cArg.name);
						WriteLine(";");
                    }
                }
				PopIndent();
				WriteLine("}");

						
				// Visit Function
				WriteLine(" ");
				WriteLine("public override T Accept<T>(IVisitor<T> visitor)");
				WriteLine("{");
				PushIndent(INDENT);
                {
					Write("return visitor.Visit");
					WriteLine("(this);");
                }
				PopIndent();
				WriteLine("}");
            }
			PopIndent();
			WriteLine("}");


			if(i + 1 < expressions.Length)
            {
				WriteLine("");
            }
		}
		PopIndent();

#>

		/// <summary>
		/// Base function for visiting our trees.
		/// </summary> 
		public abstract T Accept<T>(IVisitor<T> visitor);
	}
}


<#+ 
public struct Exp
{
	public string name;
	public Arg[] args;

	public Exp(string name, params Arg[] args)
    {
		this.name = name;
		this.args = args;
    } 
}

public struct Arg 
{
	public string name;
	public string type;

	public Arg(string type, string name)
    {
		this.name = name;
		this.type = type;
    }
}
#>